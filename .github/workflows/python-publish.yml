name: Multi-Job Workflow

on:
  pull_request:
    types:
      - closed
    branches:
      - 'main'
    paths:
      - '**/sesparser/__version__.py'
jobs:
  build:
    if: startsWith(github.head_ref, 'development') && github.event.pull_request.merged == true
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
  get_version:
    name: Construct a Release Notes and Pass Version ID
    needs:
    - build
    outputs:
      version: ${{steps.get_version.outputs.version}}
      release_notes: ${{steps.get_version.outputs.release_notes}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
      - name: Get version using python script
        id: get_version
        run: python .github/release_helper.py
  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - get_version
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        VERSION_C: ${{ needs.get_version.outputs.version }}
        RELEASE_NOTES: ${{ needs.get_version.outputs.release_notes }}
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        v$VERSION_C
        --repo '${{ github.repository }}'
        --notes "$RELEASE_NOTES"
        --title "v$VERSION_C"
    - name: Upload artifact signatures to GitHub Release
      env:
        VERSION_C: ${{ needs.get_version.outputs.version }}
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        v$VERSION_C dist/**
        --repo '${{ github.repository }}'
  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs:
    - github-release
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/sesparser  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
        