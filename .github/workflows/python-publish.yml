name: Multi-Job Workflow

on:
  pull_request:
    types:
      - closed
    branches:
    - 'main'
jobs:
  build:
    if: github.event.pull_request.merged == true
    name: Build distribution üì¶
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    if: github.event.pull_request.merged == true
    name: >-
      Publish Python üêç distribution üì¶ to PyPI
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/sesparser  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution üì¶ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    if: github.event.pull_request.merged == true
    name: >-
      Sign the Python üêç distribution üì¶ with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - uses: actions/checkout@v4
    - name: Get version from code
      id: get_version
      run: echo "version=$(grep "__version__" ./src/sesparser/__version__.py | awk -F'"' '{print $2}')" >> "$GITHUB_OUTPUT"
    - name: Create GitHub Release
      env:
        VERSION_C: ${{ steps.get_version.outputs.version }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh release create v$VERSION_C --repo '${{ github.repository }}' --notes ""
        gh release upload v$VERSION_C  ./dist/** --repo '${{ github.repository }}'
        